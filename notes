Installing fastapi and uvicorn
    pip install fastapi
    pip install "uvicorn[standard]"

Running app on terminal:
    uvicorn <python_file_name>:<variable_for_fastapi_instance> --reload
    e.g uvicorn main:app --reload (the --reload is an optional parameter)

Running app and making it accessible not only on your local machine but your local network too:
    uvicorn main:app --reload --host <your_local_ip> --port <port_number>
    uvicorn main:app --reload --host <your_local_ip> --port <port_number>

Running app with multiple processes: user the --workers parameter
        uvicorn main:app --workers 4
    Specify the number of processes you want as shown above. The processes each run independently and each use their own
    memory. If you are loading some database records or a machine learning model, and you have multiple workers, it will
    be launched separately for each worker (process). If you load an ML model that is 1GB, and you have 4 workers, the
    amount of memory used will be 4GB.


TYPES
**Type Hints**

And adding type hints normally doesn't change what happens from what would happen without them.

1. Primitive data types
Example:
def foo(bar: int):...
def baz(chaz: str):...
def faz(lar: float):...

2. Generic data types (i.e types that have internal types) - Use square brackets to declare the data types of the internal data
List
    def foo(bar: list[int]):...
    def foo(bar: list[str]):...

Tuple
    def foo(bar: tuple[float]):...
Tuple with a specific number of items, e.g 3 items
    def bar(maz: tuple[int, str, float]):... - this function expects a tuple with three items that are int, str and float respectively
Tuple with some specified types, and some with any data type
    # For tuples of variable size, we use one type and ellipsis to indicate that any other type is allowed where the ellipsis has been applied
    x: tuple[int, ...] = (1, False) or (34, "foo") or (821, 65.33)  # Python 3.9+

Dictionary
    def maz(lar: dict[str, list[int]]):... - Use square brackets with two items: first is type for key, second is type for value

In a nutshell, generic types are: list, tuple, set, dict, Union, Optional, and others.
| (vertical bar) is a lot better and simpler than Union and Optional
Optional is short hand for Union[<type>, None]. Optional actually returns a Union in the background. However, better syntactically to use
Union than Optional if one of the data types is None



ALLOWING FOR MULTIPLE DATA TYPES FOR A SINGLE VARIABLE
Use Union (from typing) or | (vertical bar)

from typing import Union

def foo(bar: Union[str, int, None] = None):...

In Python 3.10+, you don't have to import Union and you can just use | (vertical bar)
def foo(bar: str | int | None = None):...

In both cases above, bar can either of be str, int or None type.


DECLARING A CLASS AS TYPE
class Person:
    def __init__(self, name: str):
        self.name = name


def get_person_name(one_person: Person): # means one_person is an instance of Person (it is not the class called Person)
    return one_person.name


HOW TO ADD A TYPE ANNOTATION OF A CLASS WITHIN THE SAME CLASS
In a method, for instance, within a class, it is impossible to set a type annotation that references the same class. The
fix is so simple, just add single-quotes within the annotation for the class name like below:

class Person:
    def __init__(self, name: str):
        self.name = name

    def add_friend(self, friend: Person): # this doesn't work
        pass

    def add_friend(self, friend: 'Person'): # this works. just add the single-quotes around the class name
        pass

** TYPE HINTS CHEAT SHEET **
https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html



PYDANTIC
Pydantic is a Python library to perform data validation. You declare the "shape" of the data as classes with attributes.
And each attribute has a type.
Then you create an instance of that class with some values and it will:
 - validate the values
 - convert them to the appropriate type (if that's the case)
 - and give you an object with all the data.

And you get all the editor support with that resulting object.
Jeez, this is *literally* so cool!

Example:
from pydantic import BaseModel

class Person(BaseModel):
    name: str
    dob: date
    gender: str | None = None
    hobbies: list[str] = []


person_map = {
    "name": "Cliff",
    "dob": '2001-11-17', # pydantic will convert this string to a datetime object
    "gender": "male",
    "hobbies": [1, "coding", "ideation", "introspection", "awesomeness", True] # will convert all these values to strings (some are not strings, look closely)
} # and also validate everything

person = Person(**person_map) # initialize class with keyword args instead of positional args
print(person)


* Getting the dictionary from BaseModel *
Call base_model_instance.dict()


**Type Hints with Metadata Annotations**

Python also has a feature that allows putting additional metadata in these type hints using Annotated.

from typing import Annotated

def say_hello(name: Annotated[str, "this is just metadata"]) -> str:
    return f"Hello {name}"

Python itself doesn't do anything with this Annotated. And for editors and other tools, the type is still str. But you can use
this space in Annotated to provide FastAPI with additional metadata about how you want your application to behave.
The important thing to remember is that THE FIRST PARAMETER YOU PASS TO Annotated IS THE ACTUAL TYPE. The rest, is just metadata for other tools.
Annotated can be a powerful tool.

** To check if enums are equivalent use keyword 'is' instead of ==
    Instead of: if gender == Gender.MALE
    Do: if gender is Gender.MALE